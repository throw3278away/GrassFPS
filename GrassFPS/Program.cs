using GrassFPS.Settings;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace GrassFPS
{
    public class Program
    {
        private static Lazy<TopLevelSettings> _settings = null!;
        private static TopLevelSettings Settings => _settings.Value;

        public static async Task<int> Main(string[] args) => await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "GrassFPS.esp")
                .Run(args);

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (Mutagen.Bethesda.Skyrim.IGrassGetter? grassGetter in state.LoadOrder.PriorityOrder.Grass().WinningOverrides())
            {
                if (grassGetter is null || !Settings.GlobalFilters.FilterAllows(grassGetter.FormKey))
                    continue;

                Mutagen.Bethesda.Skyrim.Grass? copy = null;
                bool wasChanged = false;
                List<(string, bool)> matchingCategoryMeta = new();

                foreach (GrassSettings category in Settings.GrassCategories)
                {
                    if (!category.HasAnyEnabledValues() || category.FilterDisallows(grassGetter))
                        continue;

                    copy = category.ApplySettingTo(grassGetter, out bool valueChanged);

                    matchingCategoryMeta.Add((category.Identifier, valueChanged));
                    wasChanged = valueChanged || wasChanged;
                }

                if (copy is null || matchingCategoryMeta.Count.Equals(0))
                    continue;

                Console.WriteLine($"\"{copy.EditorID}\" [GRAS:{copy.FormKey.IDString()}] matches categor{(matchingCategoryMeta.Count.Equals(1) ? "y" : "ies")}:");

                foreach ((string name, bool madeChanges) in matchingCategoryMeta)
                {
                    Console.Write($"  - \"{name}\"");
                    if (madeChanges)
                    {
                        Console.WriteLine();
                        continue;
                    }
                    Console.WriteLine("\t (no changes)");
                }

                if (wasChanged)
                {
                    state.PatchMod.Grasses.Set(copy);
                }
            }
        }
    }
}
